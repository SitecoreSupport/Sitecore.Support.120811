// Generated by .NET Reflector from C:\inetpub\wwwroot\sc811\Website\Bin\Sitecore.Support.120811.dll
namespace Sitecore.Support.Shell.Applications.WebEdit.Commands
{
  using Sitecore;
  using Sitecore.Configuration;
  using Sitecore.Data;
  using Sitecore.Data.Fields;
  using Sitecore.Data.Items;
  using Sitecore.Diagnostics;
  using Sitecore.Shell.Applications.ContentManager;
  using Sitecore.Shell.Applications.WebEdit.Commands;
  using Sitecore.Sites;
  using System;
  using System.Collections.Generic;
  using System.Collections.Specialized;
  using System.Linq;
  using System.Reflection;

  public class PageEditFieldEditorOptions : FieldEditorOptions
  {
    private PageEditFieldEditorOptions(FieldEditorOptions innerOptions) : base(innerOptions.Fields)
    {
    }

    public PageEditFieldEditorOptions(NameValueCollection form, IEnumerable<FieldDescriptor> fields) : base(fields)
    {
      this.LoadPageEditorFieldValues(form);
    }

    public void LoadPageEditorFieldValues(NameValueCollection form)
    {
      Assert.ArgumentNotNull(form, "form");
      object[] parameters = new object[] { form };
      IEnumerable<PageEditorField> source = Type.GetType("Sitecore.ExperienceEditor.Utils.WebEditUtility, Sitecore.ExperienceEditor").GetMethod("GetFields", BindingFlags.NonPublic | BindingFlags.Static).Invoke(null, parameters) as IEnumerable<PageEditorField>;
      foreach (FieldDescriptor descriptor in base.Fields)
      {
        PageEditorField field = source.FirstOrDefault<PageEditorField>(f => (f.ItemID == descriptor.ItemUri.ItemID) && (f.FieldID == descriptor.FieldID));
        if (field != null)
        {
          descriptor.Value = field.Value;
        }
        #region Added code
        else
        {
          Database database = Database.GetDatabase(descriptor.ItemUri.DatabaseName);
          Item item = database.GetItem(descriptor.ItemUri.ItemID, descriptor.ItemUri.Language);
          // The fix: if the field is empty and there is a fallback value, display the fallback value in FieldEditor dialog
          if (item.Fields[descriptor.FieldID].Value == "")
          {
            Item fallbackItem = item.GetFallbackItem();
            string str = Context.Request.QueryString.Get("pageSite");
            if (string.IsNullOrEmpty(str))
            {
              str = Context.Site.Name;
            }
            SiteContext site = SiteContext.GetSite(str);
            Sitecore.Data.Fields.Field field2 = database.GetItem(descriptor.FieldID).Fields["Enable Language Fallback"];
            string setting = Settings.GetSetting("LanguageFieldFallback.AllowVaryFallbackSettingsPerLanguage", "false");
            if ((((fallbackItem != null) && (fallbackItem.Fields[descriptor.FieldID] != null)) && (item.Fields[descriptor.FieldID].SharedLanguageFallbackEnabled || (((field2 != null) && (field2.Value == "1")) && (setting == "true")))) && (((site != null) && (site.SiteInfo != null)) && site.SiteInfo.EnableFieldLanguageFallback))
            {
              descriptor.Value = fallbackItem.Fields[descriptor.FieldID].Value;
            }
          }
          else
            descriptor.Value = item.Fields[descriptor.FieldID].Value;
        }
        #endregion
      }
    }

    public static PageEditFieldEditorOptions Parse(string handle) =>
        new PageEditFieldEditorOptions(FieldEditorOptions.Parse(handle));

    public void SetPageEditorFieldValues()
    {
      WebEditResponse.EditFrameUpdateStart();
      foreach (FieldDescriptor descriptor in base.Fields)
      {
        Item itemNotNull = Sitecore.Client.GetItemNotNull(descriptor.ItemUri);
        WebEditResponse.SetFieldValue(itemNotNull, itemNotNull.Fields[descriptor.FieldID], descriptor.Value);
      }
      WebEditResponse.EditFrameUpdateEnd();
    }
  }
}
